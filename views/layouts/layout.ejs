<!DOCTYPE html>
<html>
  <head>
    <title>milestone</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css"> 
    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <nav class="navbar" role="navigation" aria-label="main navigation">
    <div class="navbar-brand">
      <a class="navbar-item" href="">
        <img src="http://129.204.236.214:8089/logo1.jpeg" width="30" height="30">
      </a>
  
      <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="navbarBasicExample" onclick="BurgerClicked(this)">
        <span aria-hidden="ture"></span>
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
      </a>
    </div>
    
    <div id="navbarBasicExample" class="navbar-menu">
      <div class="navbar-start">
        <a class="navbar-item" href="/">
          Home
        </a>
  
        <a class="navbar-item" href="/oolong/search?Region=&MinCoins=&MaxCoins=&Deal_Valid_Till=&limit=2&offset=0">
          Search
        </a>

        <a class="navbar-item" href="/oolong/create" id="create">
          Create
        </a>
  
        <a class="navbar-item" href="/oolong/admin" id="admin">
          Admin
        </a>

        <a class="navbar-item" href="/user/redeemed" id="redeemed">
          My Redeemed Coupons
        </a>
      </div>
  
      <div class="navbar-end">
        <div class="navbar-item">
          <div class="buttons">
            <div class="content" id="client name">
               Hi,<%= req.session.username %>
            </div>
            <a class="button is-primary" id="sign">
              <strong>Sign up</strong>
            </a>
            <a class="button is-light" id="log" href="/user/login">
              Log in
            </a>
          </div>
        </div>
      </div>
    </div>
  </nav>


  <body>
    <section class="hero is-primary">
      <div class="hero-body">
        <div class="container">
          <h1 class="title">
            a~~~o~~~~
          </h1>
          <h2 class="subtitle">
            Pls show mercy~~ 
          </h2>
        </div>
      </div>
    </section>
    <section class="section">
      <div class="container is-fullhd">
          <div class="column is-fullwidth">
  
              <%- body %>
  
          </div>
      </div>
    </section>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <script defer src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"></script>
  </body>

  <footer class="footer">
    <div class="content has-text-centered">
      <p>
        <strong>Comp7270 milestone project</strong> by Allan XUYu ,Student ID:20416601.
        
      </p>
    </div>
  </footer>

  <script>
    // set switch
    function BurgerClicked(elem) {
        var NavbarHandle= document.getElementById("navbarBasicExample");
        if(NavbarHandle.className == "navbar-menu is-active")
        {
            NavbarHandle.setAttribute("class","navbar-menu")
        }
        else
        {
            NavbarHandle.setAttribute("class","navbar-menu is-active");
        }           
    }

    var role = '<%= req.session.role %>';
    if(role=="admin") // Logined
    {
      var logButton = document.getElementById("log");
      //logButton.setAttribute("method","POST");
      logButton.setAttribute("href","/user/logout");
      logButton.innerHTML='Log out';
      document.getElementById("sign").setAttribute("style","display:none");
      document.getElementById("redeemed").setAttribute("style","display:none");
    }
    else if(role=="member")
    {
      var logButton = document.getElementById("log");
      //logButton.setAttribute("method","POST");
      logButton.setAttribute("href","/user/logout");
      logButton.innerHTML='Log out';
      document.getElementById("sign").setAttribute("style","display:none");
      document.getElementById("create").setAttribute("style","display:none");
      document.getElementById("admin").setAttribute("style","display:none");
      // Self-information -redeem
      
      //
    }
    else // Non-member
    {
      var logButton = document.getElementById("log");
      //logButton.setAttribute("method","GET");
      logButton.setAttribute("href","/user/login");
      logButton.innerHTML='Login';

      document.getElementById("create").setAttribute("style","display:none");
      document.getElementById("admin").setAttribute("style","display:none");
      document.getElementById("client name").setAttribute("style","display:none");
      document.getElementById("redeemed").setAttribute("style","display:none");
    } //

  </script>

</html>
